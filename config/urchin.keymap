/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 9>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        base {
            bindings = <
&kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y        &kp U              &kp I                &kp O            &kp P
&mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_GUI APOSTROPHE
&lt 7 Z         &kp X           &kp C               &kp V             &kp B        &kp N        &kp M              &kp COMMA            &kp PERIOD       &lt 7 SLASH
                                                    &lt 2 TAB         &lt 3 SPACE  &lt 4 ENTER  &lt 5 BACKSPACE
            >;
        };

        media {
            bindings = <
&trans        &trans        &trans            &trans          &trans  &bt BT_CLR         &bt BT_CLR_ALL    &trans             &trans           &studio_unlock
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans  &ext_power EP_TOG  &kp K_PREVIOUS    &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp K_NEXT
&trans        &trans        &trans            &trans          &trans  &out OUT_TOG       &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3
                                              &trans          &trans  &kp K_STOP2        &kp K_PLAY_PAUSE
            >;
        };

        nav {
            bindings = <
&trans        &trans        &trans            &trans          &trans  &kp K_REDO    &kp K_PASTE    &kp K_COPY     &kp K_CUT    &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans  &kp CAPSLOCK  &kp LEFT       &kp DOWN       &kp UP       &kp RIGHT
&trans        &trans        &trans            &trans          &trans  &kp INSERT    &kp HOME       &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                                              &trans          &trans  &kp ENTER     &kp BACKSPACE
            >;
        };

        mouse {
            bindings = <
&trans        &trans        &trans            &trans          &trans  &kp K_REDO  &kp K_PASTE     &kp K_COPY      &kp K_CUT     &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans  &trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&trans        &trans        &trans            &trans          &trans  &trans      &trans          &trans          &trans        &trans
                                              &trans          &trans  &mkp MB2    &mkp MB1
            >;
        };

        symbol {
            bindings = <
&kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE  &trans  &trans           &trans             &trans         &trans
&kp COLON       &kp DOLLAR       &kp PERCENT   &kp CARET              &kp PLUS         &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp TILDE       &kp EXCLAMATION  &kp AT        &kp POUND              &kp PIPE         &trans  &trans           &trans             &trans         &trans
                                               &kp RIGHT_PARENTHESIS  &kp UNDERSCORE   &trans  &trans
            >;
        };

        num {
            bindings = <
&kp LEFT_BRACKET  &kp N7        &kp N8        &kp N9        &kp RIGHT_BRACKET  &trans  &trans           &trans             &trans         &trans
&kp SEMICOLON     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL          &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH      &trans  &trans           &trans             &trans         &trans
                                              &kp N0        &kp MINUS          &trans  &trans
            >;
        };

        fun {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9     &kp PRINTSCREEN  &trans  &trans           &trans             &trans         &trans
&kp F11  &kp F4  &kp F5  &kp F6     &kp SCROLLLOCK   &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK  &trans  &trans           &trans             &trans         &trans
                         &kp SPACE  &kp TAB          &trans  &trans
            >;
        };

        button {
            bindings = <
&kp K_UNDO    &kp K_CUT     &kp K_COPY        &kp K_PASTE     &kp K_REDO  &kp K_REDO  &kp K_PASTE      &kp K_COPY         &kp K_CUT      &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans      &trans      &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp K_UNDO    &kp K_CUT     &kp K_COPY        &kp K_PASTE     &kp K_REDO  &kp K_REDO  &kp K_PASTE      &kp K_COPY         &kp K_CUT      &kp K_UNDO
                                              &mkp MB1        &mkp MB2    &mkp MB2    &mkp MB1
            >;
        };

        // Numbers and high frequency symbols
        // Main modifiers and arrow keys
        // Function keys with modifiers
        // Low frequency symbols.
        // Used to type regional accents.
        // Used to change the keyboard's settings.media {};
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        media_layer_combo {
            if-layers = <2 3>;
            then-layer = <1>;
        };

        fun_layer_combo {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};
